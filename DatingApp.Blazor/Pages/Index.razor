@page "/"

@inherits FluxorComponent

@inject IState<UserState> UserState
@inject IDispatcher Dispatcher
@inject IJSRuntime js
@inject HttpClient http
@inject IToastService toastService
@inject UserService userService
@inject AuthService authService

<div class="container mt-5">
    @if (registerMode)
    {
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-4">
                    <Register ShowRegisterForm="ShowRegisterForm" />
                </div>
            </div>
        </div>
    }
    else
    {
        <div style="text-align: center;">
            <h1>Find your match</h1>
            <p class="lead">
                Come on in to view your matches... All you need to do is sign up!
            </p>
            <div class="text-center">
                <button class="btn btn-primary btn-lg mr-2"
                        @onclick="@(() => ShowRegisterForm(true))">
                    Register
                </button>
                <button class="btn btn-info btn-lg"
                        @onclick="Alert">
                    Learn more
                </button>
            </div>
        </div>
    }
</div>

<a href="/login"></a>

@code {
    bool registerMode;

    protected override async Task OnInitializedAsync()
    {
        var userJson = await js.InvokeAsync<string>("getUser");
        if (!string.IsNullOrWhiteSpace(userJson))
        {
            var user = JsonSerializer.Deserialize<User>
                (userJson);
            Dispatcher.Dispatch(new SetCurrentUserAction { User = user });

            await js.InvokeVoidAsync("log", UserState.Value.CurrentUser);
        }
    }

    void ShowRegisterForm(bool val)
    {
        registerMode = val;
    }

    async Task Alert()
    {
        await js.InvokeVoidAsync("confirm", "Test");
        var users = await userService.GetUser(1);
        await js.InvokeVoidAsync("log", users);
    }
}