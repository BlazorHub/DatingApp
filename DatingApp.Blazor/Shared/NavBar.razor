@inject NavigationManager navigationManager
@inject AuthService authService
@inject IJSRuntime jsRuntime

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
        <NavLink class="navbar-brand"
                 href=""
                 Match="NavLinkMatch.All">Dating App</NavLink>
        <button class="navbar-toggler"
                type="button"
                data-toggle="collapse"
                data-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent"
                aria-expanded="false"
                aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">

            <ul class="navbar-nav mr-auto">
                @if (loggedIn)
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="members">Matches</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="lists">Lists</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="messages">Messages</NavLink>
                    </li>
                }
            </ul>
            <form class="form-inline my-2 my-lg-0">
                @if (loggedIn)
                {
                    <div class="dropdown">
                        <a class="nav-link dropdown-toggle"
                           id="navbarDropdown"
                           role="button"
                           data-toggle="dropdown"
                           aria-haspopup="true"
                           aria-expanded="false">
                            Welcome User
                        </a>
                        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <a class="dropdown-item" href="#">Edit Profile</a>
                            <a class="dropdown-item" href="#">Another action</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item"
                               @onclick="Logout">
                                Logout
                            </a>
                        </div>
                    </div>
                    <input class="form-control mr-sm-2"
                           type="search"
                           placeholder="Search"
                           aria-label="Search">
                    <button class="btn btn-outline-success my-2 my-sm-0"
                            type="submit">
                        Search
                    </button>
                }
                else
                {
                    <EditForm Model="@loginForm"
                              class="form-inline my-2 my-lg-0"
                              OnSubmit="@Login">
                        <InputText required
                                   class="form-control mr-sm-2"
                                   type="text"
                                   placeholder="Username"
                                   @bind-Value="loginForm.Username" />
                        <InputText required
                                   class="form-control mr-sm-2"
                                   type="password"
                                   placeholder="Password"
                                   @bind-Value="loginForm.Password" />
                        <button class="btn btn-outline-success my-2 my-sm-0"
                                type="submit">
                            Login
                        </button>
                    </EditForm>
                }
            </form>
        </div>
    </div>
</nav>

@code {
    LoginForm loginForm = new LoginForm();
    bool loggedIn;

    protected override async Task OnInitializedAsync()
    {
        string token = await jsRuntime.InvokeAsync<string>("getToken");

        if (!string.IsNullOrWhiteSpace(token))
        {
            await jsRuntime.InvokeVoidAsync("log", token);
            loggedIn = true;
        }
    }

    bool isFormValid()
    {
        return !(string.IsNullOrWhiteSpace(loginForm.Username)) &&
        !(string.IsNullOrWhiteSpace(loginForm.Password));
    }

    async Task Login()
    {
        var response = await authService.Login(loginForm);

        if (response.StartsWith("OK"))
        {
            var token = response.Split(" ")[1];
            await jsRuntime.InvokeVoidAsync("alertify.success", "Welcome!");
            await jsRuntime.InvokeVoidAsync("saveToken", token);

            loggedIn = true;

            navigationManager.NavigateTo("/members");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alertify.error", response);
        }

    }

    async Task Logout()
    {
        await jsRuntime.InvokeVoidAsync("removeToken");

        loggedIn = false;

        navigationManager.NavigateTo("/");
    }
}