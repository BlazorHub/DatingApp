@using Data
@using Services
@using System.Text.Json

@inject AuthService authService
@inject IJSRuntime jsRuntime

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand" href="#">Dating App</a>

    <ul class="navbar-nav mr-auto">
        <li class="nav-item active">
            <a class="nav-link" href="#">Matches </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#">Lists</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="#">Messages</a>
        </li>
    </ul>

    @if (loggedIn)
    {
        <div class="dropdown">
            <a class="dropdown-toggle"
               @onclick="Logout">
                Welsome User!
            </a>

            <div class="dropdown-menu">
                <a class="dropdown-item" href="#"><i class="fa fa-user"></i> Edit Profile</a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="#"><i class="fa fa-sign-out"></i> Logout</a>
            </div>
        </div>
    }
    else
    {
        <EditForm Model="@loginForm"
                  class="form-inline my-2 my-lg-0"
                  OnSubmit="@Login">
            <InputText required
                       class="form-control mr-sm-2"
                       type="text"
                       placeholder="Username"
                       @bind-Value="loginForm.Username" />
            <InputText required
                       class="form-control mr-sm-2"
                       type="password"
                       placeholder="Password"
                       @bind-Value="loginForm.Password" />
            <button class="btn btn-outline-success my-2 my-sm-0"
                    type="submit">
                Login
            </button>
        </EditForm>
    }
</nav>

@code {
    LoginForm loginForm = new LoginForm();
    bool loggedIn;

    bool isFormValid()
    {
        return !(string.IsNullOrWhiteSpace(loginForm.Username)) &&
               !(string.IsNullOrWhiteSpace(loginForm.Password));
    }

    async Task Login()
    {
        var response = await authService.Login(loginForm);

        var options = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };
        var authResponse = JsonSerializer.Deserialize<AuthResponse>(response, options);

        await jsRuntime.InvokeVoidAsync("log", response);
        await jsRuntime.InvokeVoidAsync("saveToken", authResponse.Token);

        loggedIn = true;
    }

    async Task Logout()
    {
        await jsRuntime.InvokeVoidAsync("removeToken");
        loggedIn = false;
    }
}