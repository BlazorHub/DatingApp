@page "/members"

@inject UserService userService

<div class="container mt-5">
    <div class="row">
        <div class="pagination">
            <button class="btn btn-custom"
                    disabled="@(currentPage == 1)"
                    @onclick=@(async ()=> await GetMembers(--currentPage))>
                Prev
            </button>
            @for (int i = 1; i <= totalPages; i++)
            {
                var curPage = i;
                <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")"
                        @onclick=@(async () => await GetMembers(curPage))>
                    @curPage
                </button>
            }
            <button class="btn btn-custom"
                    disabled="@(currentPage == totalPages)"
                    @onclick=@(async ()=> await GetMembers(++currentPage))>
                Next
            </button>
        </div>

        <label>Page Size: </label>
        <input type="number"
               @bind="pageSize" />
    </div>
    <div class="row">
        @if (Users != null)
        {
            @foreach (var user in Users)
            {
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <MemberCard User="user" />
                </div>
            }
        }
    </div>
</div>

@code {
    IEnumerable<User> Users;

    int totalPages;
    int currentPage = 1;
    int pageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        await GetMembers(currentPage);
    }

    async Task GetMembers(int page)
    {
        currentPage = page;

        var response = await userService.GetUsers(page, pageSize);

        Users = response.Result;

        totalPages = (int)Math.Ceiling(response.Pagination.TotalItems /
                                      (double)response.Pagination.ItemsPerPage);
    }
}