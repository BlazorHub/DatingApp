@page "/members"

@inject UserService userService
@inject IState<UserState> userState
@inject IJSRuntime js

@if (!loading)
{
    <div class="container mt-5">
        <div class="text-center mt-3">
            <h2>Your matches - @totalItems found</h2>
        </div>

        <div class="container mt-3">
            <form class="form-inline" novalidate>
                <label>Order By</label>
                <div class="btn-group btn-group-toggle mr-1 ml-1" data-toggle="buttons">
                    <label class="btn btn-secondary active">
                        <input type="radio"
                               name="options"
                               id="lastActive"
                               checked="@(orderBy == "lastActive")"
                               @onclick="@(async () => {
                                               orderBy = "lastActive";
                                               await GetMembers(currentPage); })">
                        Last Active
                    </label>
                    <label class="btn btn-secondary">
                        <input type="radio"
                               name="options"
                               id="option2"
                               checked="@(orderBy == "created")"
                               @onclick="@(async () => {
                                               orderBy = "created";
                                               await GetMembers(currentPage); })">
                        Newest
                    </label>
                </div>

                <div class="form-group">
                    <label for="minAge">Age From</label>
                    <input type="number"
                           class="form-control ml-1"
                           style="width: 70px"
                           id="minAge" name="minAge"
                           @bind="minAge">
                </div>

                <div class="form-group px-2">
                    <label for="maxAge">Age To</label>
                    <input type="number"
                           class="form-control ml-1"
                           style="width: 70px"
                           id="maxAge" name="maxAge"
                           @bind="maxAge">
                </div>

                <div class="form-group px-2">
                    <label for="gender">Show: </label>
                    <select class="form-control ml-1"
                            style="width: 130px"
                            id="gender" name="gender"
                            @bind="genderToShow">
                        <option value="male">Males</option>
                        <option value="female">Females</option>
                    </select>
                </div>
                <button type="button"
                        class="btn btn-primary"
                        style="margin-left:10px"
                        @onclick="() => GetMembers(currentPage)">
                    Apply Filters
                </button>
                <button type="button"
                        class="btn btn-info"
                        style="margin-left:10px"
                        @onclick="ResetFilters">
                    Reset Filters
                </button>
            </form>
            <br>
        </div>

        <div class="row">
            @if (Users != null)
            {
                @foreach (var user in Users)
                {
                    <div class="col-lg-2 col-md-3 col-sm-6">
                        <MemberCard User="user" />
                    </div>
                }
            }
        </div>

        <PaginationFooter PageSize="pageSize"
                          CurrentPage="currentPage"
                          TotalPages="totalPages"
                          PageSizeChanged="@(async (e) => {
                                                pageSize = e;
                                                await GetMembers(currentPage);
                                             })"
                          PageChanged="@((e) => GetMembers(e))" />
    </div>
}

@code {
    IEnumerable<User> Users;

    bool loading;

    // pagination
    int totalItems;
    int totalPages;
    int currentPage = 1;
    int pageSize = 5;

    // filters
    string genderToShow;
    int minAge = 18;
    int maxAge = 99;

    // sorting
    string orderBy = "lastActive";

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        await SetGenderToShow();
        await GetMembers(currentPage);

        loading = false;
    }

    async Task SetGenderToShow()
    {
        var userJson = await js.InvokeAsync<string>("getUser");
        if (!string.IsNullOrWhiteSpace(userJson))
        {
            var user = JsonSerializer.Deserialize<User>(userJson);

            genderToShow = user.Gender == "male" ? "female" : "male";
        }
    }

    async Task GetMembers(int page)
    {
        currentPage = page;

        var response = await userService.GetUsers(page,
                                                  pageSize,
                                                  genderToShow,
                                                  minAge,
                                                  maxAge,
                                                  orderBy,
                                                  false,
                                                  false);

        Users = response.Result;

        totalItems = response.Pagination.TotalItems;
        totalPages = (int)Math.Ceiling(response.Pagination.TotalItems /
                                      (double)response.Pagination.ItemsPerPage);
    }

    async Task ResetFilters()
    {
        await SetGenderToShow();
        minAge = 18;
        maxAge = 99;

        await GetMembers(currentPage);
    }
}