@page "/messages"

@inject UserService userService
@inject NavigationManager navManager
@inject IToastService toastService
@inject IJSRuntime js

<div class="container mt-5">
    <div class="row">
        <div class="btn-group">
            <button class="btn btn-primary
                    @(messageContainer == "Unread" ? "active" : "")"
                    @onclick="@(() => GetMessages("Unread", currentPage))">
                <i class="fa fa-envelope"></i> Unread
            </button>
            <button class="btn btn-primary
                    @(messageContainer == "Inbox" ? "active" : "")"
                    @onclick="@(() => GetMessages("Inbox", currentPage))">
                <i class="fa fa-envelope-open"></i> Inbox
            </button>
            <button class="btn btn-primary
                    @(messageContainer == "Outbox" ? "active" : "")"
                    @onclick="@(() => GetMessages("Outbox", currentPage))">
                <i class="fa fa-paper-plane"></i> Outbox
            </button>
        </div>
    </div>

    @if (messages == null)
    {
        <div class="row">
            <h3>No messages</h3>
        </div>
    }
    else
    {
        <div class="row">
            <table class="table table-hover">
                <tr>
                    <th style="width: 40%">Message</th>
                    <th style="width: 20%">
                        @(messageContainer == "Inbox" ||
                          messageContainer == "Unread" ? "From" : "To")
                    </th>
                    <th style="width: 20%">
                        @(messageContainer == "Inbox" ||
                          messageContainer == "Unread" ? "Received" : "Sent")
                    </th>
                    <th style="width: 20%"></th>
                </tr>
                @if (messages.Count() > 0)
                    @foreach (var message in messages)
                    {
                        <tr>
                            <td class="message-title"
                                @onclick="@(() => navManager.NavigateTo($"members/" +
                            $"{(messageContainer == "Outbox" ? message.RecipientId : message.SenderId)}" +
                            $"/messages"))">
                                @message.Content
                            </td>
                            <td>
                                @if (messageContainer == "Inbox")
                                {
                                    <div>
                                        <img src=@message.SenderPhotoUrl
                                             class="img-circle rounded-circle"
                                             style="width: 40px;">
                                        <strong>@message.SenderKnownAs</strong>
                                    </div>
                                }
                                else if (messageContainer == "Unread")
                                {
                                    <div>
                                        <img src=@message.SenderPhotoUrl
                                             class="img-circle rounded-circle"
                                             style="width: 40px;">
                                        <strong>@message.SenderKnownAs</strong>
                                    </div>
                                }
                                else if (messageContainer == "Outbox")
                                {
                                    <div>
                                        <img src=@message.RecipientPhotoUrl
                                             class="img-circle rounded-circle"
                                             style="width: 40px;">
                                        <strong>@message.RecipientKnownAs</strong>
                                    </div>
                                }
                            </td>
                            <td>
                                @message.MessageSent
                            </td>
                            <td>
                                <button class="btn btn-danger"
                                        type="button"
                                        @onclick="@(() => DeleteMessage(message))">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
            </table>
        </div>
    }
</div>

<PaginationFooter CurrentPage="@currentPage"
                  PageSize="@pageSize"
                  TotalPages="@totalPages"
                  PageSizeChanged="@(async (e) => {
                                        pageSize = e;
                                        await GetMessages(messageContainer, currentPage);
                                     })"
                  PageChanged="@((e) => GetMessages(messageContainer, e))" />

<style>
    .message-title:hover {
        cursor: pointer;
        text-decoration: underline;
        font-weight: bold;
    }
</style>

@code {
    List<Message> messages;

    string messageContainer = "Unread";

    // pagination
    int totalItems;
    int totalPages;
    int currentPage = 1;
    int pageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        await GetMessages(messageContainer, currentPage);
    }

    async Task GetMessages(string container, int page)
    {
        currentPage = page;

        messages = new List<Message>();
        messageContainer = container;

        var response = await userService.GetMessages(page, pageSize, container);

        messages = response.Result.ToList();
        totalItems = response.Pagination.TotalItems;
        totalPages = (int)Math.Ceiling(response.Pagination.TotalItems /
                                      (double)response.Pagination.ItemsPerPage);
    }

    async Task DeleteMessage(Message message)
    {
        var response = await userService.DeleteMessage(message.Id);
        if (response.IsSuccessStatusCode)
        {
            messages.Remove(message);
            toastService.ShowSuccess("Message deleted!");
        }
        else
            toastService.ShowError("Error!");
    }
}