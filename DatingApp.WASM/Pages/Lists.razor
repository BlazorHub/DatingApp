@page "/lists"

@inject UserService usersService
@inject AuthService authService

<div class="text-center mt-3">
    <h2>
        @(usersToShow == "likers" ?
            "Members who like me" :
            "Members who I Like") :
        @(pagination?.TotalItems)
    </h2>
</div>

<div class="container mt-3">

    <div class="row">
        <div class="btn-group">
            <button class="btn btn-primary @(usersToShow == "likers" ? "active" : "")"
                    @onclick="@(async () => { usersToShow = "likers"; await GetUsers(); })">
                Members who like me
            </button>
            <button class="btn btn-primary @(usersToShow == "likees" ? "active" : "")"
                    @onclick="@(async () => { usersToShow = "likees"; await GetUsers(); })">
                Members who I like
            </button>
        </div>
    </div>

    <br>

    <div class="row">
        @if (users != null)
            @foreach (var user in users)
            {
                <div class="col-lg-2 col-md-3 col-sm-6">
                    <MemberCard User="user" />
                </div>
            }
    </div>
</div>

@code {
    IEnumerable<User> users;
    Pagination pagination;

    string usersToShow = "likers";
    string genderToShow;

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = await authService.GetLoggedInUserId();
        var currentUser = await usersService.GetUser(currentUserId);
        var currentUserGender = currentUser.Gender;

        genderToShow = currentUserGender == "male" ? "female" : "male";
        await GetUsers();
    }

    async Task GetUsers()
    {
        var paginatedResult = await usersService.GetUsers(1,
                                                          5,
                                                          genderToShow,
                                                          18,
                                                          99,
                                                          "created",
                                                          usersToShow == "likers",
                                                          usersToShow == "likees");
        pagination = paginatedResult.Pagination;
        users = paginatedResult.Result;
    }
}