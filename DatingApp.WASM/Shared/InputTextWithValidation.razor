<input type=@Type
       class=@Class
       placeholder=@Placeholder
       @onblur="() => EditContext.NotifyFieldChanged(new FieldIdentifier(Model, PropertyName))"
       @bind="@BindingValue" />
@if (EditContext.IsModified(new FieldIdentifier(Model, PropertyName)) || ShowErrors == true)
{
    @foreach (var error in EditContext.GetValidationMessages(new FieldIdentifier(Model, PropertyName)))
    {
        <p class="text-danger">
            @error
        </p>
    }
}

@code {
    private string _value;

    [Parameter]
    public EditContext EditContext { get; set; }
    [Parameter]
    public RegisterForm Model { get; set; }
    [Parameter]
    public string Type { get; set; }
    [Parameter]
    public string PropertyName { get; set; }
    [Parameter]
    public string Placeholder { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public bool ShowErrors { get; set; }
    [Parameter]
    public string BindingValue
    {
        get => _value;
        set
        {
            if (_value == value)
                return;

            _value = value;

            BindingValueChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<string> BindingValueChanged { get; set; }

}