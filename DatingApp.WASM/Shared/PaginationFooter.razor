@inject IJSRuntime js

<div class="row d-flex justify-content-between mt-5"
     style="position: fixed; width: 100%; bottom: 0; right: 0; z-index: 3;
                    background-color: white; padding: 5px;">
    <div class="pagination">
        <button class="btn btn-custom"
                disabled="@(CurrentPage == 1)"
                @onclick=@(() => PageChanged.InvokeAsync(--CurrentPage))>
            Prev
        </button>
        <span id="pagination-bar"
              style="overflow-x: scroll; max-width: 350px; white-space: nowrap;">
            @for (int i = 1; i <= TotalPages; i++)
            {
                var curPage = i;
                <button class="btn btn-custom pagebutton
                        @(CurrentPage==curPage?"btn-danger curPageBtn":"")"
                        @onclick=@(() => PageChanged.InvokeAsync(curPage))>
                    @curPage
                </button>
            }
        </span>
        <button class="btn btn-custom"
                disabled="@(CurrentPage == TotalPages)"
                @onclick=@(() => PageChanged.InvokeAsync(++CurrentPage))>
            Next
        </button>
    </div>

    <div class="form-group mr-5">
        <label for="page-size">Page Size: </label>
        <input id="page-size"
               type="number"
               max="30"
               style="width: 50px;"
               value="@PageSize"
               @onchange="@((e) => {
                                PageSize = int.Parse(e.Value.ToString());
                                PageSizeChanged.InvokeAsync(PageSize);
                            })" />
    </div>
</div>

<style>
    /* Hide scrollbar for Chrome, Safari and Opera */
    #pagination-bar::-webkit-scrollbar {
        display: none;
    }

    /* Hide scrollbar for IE and Edge */
    #pagination-bar {
        -ms-overflow-style: none;
    }
</style>

@code {
    [Parameter]
    public int PageSize { get; set; }
    [Parameter]
    public int CurrentPage { get; set; }
    [Parameter]
    public int TotalPages { get; set; }
    [Parameter]
    public EventCallback<int> PageSizeChanged { get; set; }
    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollToCurrentPageBtn();
    }

    async Task ScrollToCurrentPageBtn()
    {
        await js.InvokeVoidAsync("scrollTo", "curPageBtn");
    }
}